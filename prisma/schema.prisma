// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid()) @map("_id")
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  backgroundImage String?   @db.String
  handle          String?   @unique
  description     String?   @db.String
  accounts        Account[]
  sessions        Session[]

  orgs UserOrganization[]
}

model Board {
  id            String @id @default(uuid()) @map("_id")
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.String
  imageFullUrl  String @db.String
  imageUserName String @db.String
  imageLinkHTML String @db.String

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(uuid()) @map("_id")
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  primaryColor   String @default("bg-neutral-200")
  secondaryColor String @default("text-neutral-900")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  order       Int
  description String? @db.String

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  primaryColor   String @default("bg-white")
  secondaryColor String @default("text-neutral-900")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String      @id @default(uuid()) @map("_id")
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.String
  userName    String      @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Org {
  id      String @id @default(uuid()) @map("_id")
  name    String
  image   String
  slugUrl String

  createdAt DateTime           @default(now())
  updateAt  DateTime           @updatedAt
  users     UserOrganization[]
}

model UserOrganization {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String
  org    Org    @relation(fields: [orgId], references: [id])
  orgId  String

  createdAt DateTime @default(now())

  @@unique([userId, orgId])
  @@index([orgId, userId])
}

model OrgLimit {
  id    String @id @default(uuid()) @map("_id")
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid()) @map("_id")
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
